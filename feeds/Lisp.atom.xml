<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">好记性不如烂笔头: Posts tagged 'Lisp'</title>
 <link rel="self" href="https://zhuzhonghua.github.com/feeds/Lisp.atom.xml" />
 <link href="https://zhuzhonghua.github.com/tags/Lisp.html" />
 <id>urn:https-zhuzhonghua-github-com:-tags-Lisp-html</id>
 <updated>2018-08-20T10:16:54Z</updated>
 <entry>
  <title type="text">使用Racket(Scheme/Lisp)进行游戏服务器开发</title>
  <link rel="alternate" href="https://zhuzhonghua.github.com/2018/08/%E4%BD%BF%E7%94%A8racket-scheme-lisp-%E8%BF%9B%E8%A1%8C%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91.html?utm_source=Lisp&amp;utm_medium=Atom" />
  <id>urn:https-zhuzhonghua-github-com:-2018-08-E4-BD-BF-E7-94-A8racket-scheme-lisp-E8-BF-9B-E8-A1-8C-E6-B8-B8-E6-88-8F-E6-9C-8D-E5-8A-A1-E5-99-A8-E5-BC-80-E5-8F-91-html</id>
  <published>2018-08-20T10:16:54Z</published>
  <updated>2018-08-20T10:16:54Z</updated>
  <author>
   <name>ZhongHua</name></author>
  <content type="html">
&lt;p&gt;&lt;a href="https://github.com/zhuzhonghua/racket_gameserver"&gt;Github仓库地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Racket作为Lisp方言，从它们的Blog&lt;a href="https://blog.racket-lang.org/index.html"&gt;Racket Blog&lt;/a&gt;就可以看出，社区非常活跃。&lt;/p&gt;

&lt;p&gt;安装好Racket之后，使用racket main.rkt就可以运行服务器了。&lt;/p&gt;

&lt;p&gt;附带一个使用nodejs的测试客户端，node testClient.js 可以连接上Racket服务器。&lt;/p&gt;

&lt;p&gt;协议使用的Protobuf&lt;/p&gt;

&lt;p&gt;(serve port-no)是主入口函数，port-no是服务器需要监听的端口。&lt;/p&gt;

&lt;p&gt;(game-loop) 在单独线程中运行，使用custodians(守护)机制，来释放所有系统资源，streams，线程等&lt;/p&gt;

&lt;p&gt;game-loop的处理流程&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;接收新来的连接(accept-conn)
  &lt;br /&gt;&lt;/li&gt;
 &lt;li&gt;接收并处理客户端发送的消息(read-conn)
  &lt;br /&gt;&lt;/li&gt;
 &lt;li&gt;发送给客户端的消息(flush-conn)&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;在read/write连接时，如果出错，使用with-handlers来处理网络异常。&lt;/p&gt;

&lt;p&gt;在op.rkt中定义了示例消息号
 &lt;br /&gt;在route.rkt中定义了消息路由，哪个消息号的消息，由哪个函数处理
 &lt;br /&gt;在proto.rkt中定义了反序列化的消息，以供游戏逻辑代码使用&lt;/p&gt;

&lt;p&gt;上面的定义比较简单粗暴，但是原理都是类似的&lt;/p&gt;

&lt;p&gt;录了一些视频，一点一点讲解，从零开始写这个服务器代码
 &lt;br /&gt;在持续更新中&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PL3gfPn2A9HNGqA6RjVQhpNW8TjaRqOlEt"&gt;Youtube地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://h5.renrenjiang.cn/#/column?cid=19930&amp;amp;su=5799319"&gt;人人讲地址&lt;/a&gt;&lt;/p&gt;</content></entry>
 <entry>
  <title type="text">c/c++与chibi-scheme互相调用</title>
  <link rel="alternate" href="https://zhuzhonghua.github.com/2018/07/c-c-%E4%B8%8Echibi-scheme%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8.html?utm_source=Lisp&amp;utm_medium=Atom" />
  <id>urn:https-zhuzhonghua-github-com:-2018-07-c-c-E4-B8-8Echibi-scheme-E4-BA-92-E7-9B-B8-E8-B0-83-E7-94-A8-html</id>
  <published>2018-07-17T23:56:25Z</published>
  <updated>2018-07-17T23:56:25Z</updated>
  <author>
   <name>ZhongHua</name></author>
  <content type="html">
&lt;p&gt;测试环境是mac&lt;/p&gt;

&lt;p&gt;chibi-scheme是scheme/lisp的一种实现，适合作为脚本语言嵌入到c/c++程序中&lt;/p&gt;

&lt;p&gt;&lt;a href="http://synthcode.com/scheme/chibi/#h2_EmbeddinginC"&gt;chibi-scheme官方文档&lt;/a&gt;写的很清楚，只是没有实例&lt;/p&gt;

&lt;p&gt;&lt;a href="http://klamp.works/2016/02/05/chibi-scheme-1.html"&gt;外国友人写的相关教程&lt;/a&gt;结合实例，写的很清楚&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zhuzhonghua/chibi-scheme.git"&gt;代码库地址&lt;/a&gt; 里的c2scheme目录是示例代码&lt;/p&gt;

&lt;p&gt;大体分成三步&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;加载scheme文件
  &lt;br /&gt;&lt;/li&gt;
 &lt;li&gt;调用scheme函数代码，传递参数，接收返回值
  &lt;br /&gt;&lt;/li&gt;
 &lt;li&gt;scheme代码调用c/c++代码，传递参数，接收返回值&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;callme.scm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(import (chibi))
(define (say-hello)
  (display "hello world from scheme")
  (newline))&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="加载scheme文件"&gt;加载scheme文件&lt;/h1&gt;

&lt;p&gt;构造字符串，然后加载&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obj1 = sexp_c_string(ctx, "callme.scm", -1);
sexp_load(ctx, obj1, NULL);&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="调用scheme函数代码传递参数接收返回值"&gt;调用scheme函数代码，传递参数，接收返回值&lt;/h1&gt;

&lt;p&gt;调用scheme函数代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sexp_eval_string(ctx, "(say-hello)", -1, NULL);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;传递参数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arg_val = sexp_make_fixnum(4);
arg_sym = sexp_intern(ctx, "arg", -1);
sexp_env_define(ctx, sexp_context_env(ctx), arg_sym, arg_val);

file_path = sexp_c_string(ctx, "callme.scm", -1);
sexp_load(ctx, file_path, NULL);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接收返回值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ret = sexp_eval_string(ctx, "(square arg)", -1, NULL);
int result = -1;
if (sexp_integerp(ret)) {
  result = sexp_unbox_fixnum(ret);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;callme.scm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (square a)
  (* a a))&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="scheme代码调用cc代码传递参数接收返回值"&gt;scheme代码调用c/c++代码，传递参数，接收返回值&lt;/h1&gt;

&lt;p&gt;callme.scm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (say-hello)
	(display "hello world from scheme")
	(newline)
	(hello-user "chibi-scheme"))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hello-user是c/c++函数，传递一个字符串
 &lt;br /&gt;在c/c++中横线会转换成下划线&lt;/p&gt;

&lt;p&gt;定义头文件&lt;/p&gt;

&lt;p&gt;c2scheme.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extern void hello_user(const char* tmp);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义stub文件&lt;/p&gt;

&lt;p&gt;c2scheme.stub&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(c-include "c2scheme.h")	
(define-c void hello-user (string))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;stub文件主要便于生成对应的c/c++文件&lt;/p&gt;

&lt;p&gt;然后运行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DYLD_LIBRARY_PATH=. ./chibi-scheme ./tools/chibi-ffi c2scheme/c2scheme.stub&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会生成对应的c/c++文件，我们看下它的内容&lt;/p&gt;

&lt;p&gt;c2scheme.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Automatically generated by chibi-ffi; version: 0.4 */

#include &amp;lt;chibi/eval.h&amp;gt;

#include "c2scheme.h"
/*
types: ()
enums: ()
*/

sexp sexp_hello_user_stub (sexp ctx, sexp self, sexp_sint_t n, sexp arg0) {
  sexp res;
  if (! sexp_stringp(arg0))
    return sexp_type_exception(ctx, self, SEXP_STRING, arg0);
  res = ((hello_user(sexp_string_data(arg0))), SEXP_VOID);
  return res;
}


sexp sexp_init_library (sexp ctx, sexp self, sexp_sint_t n, sexp env, const char* version, const sexp_abi_identifier_t abi) {
  sexp_gc_var3(name, tmp, op);
  if (!(sexp_version_compatible(ctx, version, sexp_version)
        &amp;amp;&amp;amp; sexp_abi_compatible(ctx, abi, SEXP_ABI_IDENTIFIER)))
    return SEXP_ABI_ERROR;
  sexp_gc_preserve3(ctx, name, tmp, op);
  op = sexp_define_foreign(ctx, env, "hello-user", 1, sexp_hello_user_stub);
  if (sexp_opcodep(op)) {
    sexp_opcode_return_type(op) = SEXP_VOID;
    sexp_opcode_arg1_type(op) = sexp_make_fixnum(SEXP_STRING);
  }
  sexp_gc_release3(ctx);
  return SEXP_VOID;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只需要实现hello_user这个函数即可.&lt;/p&gt;

&lt;p&gt;我们在main.cpp里实现这个方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void hello_user(const char* tmp){
	printf("in hello user %s \n", tmp);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将来可以把函数的声明和实现统一规划到别的文件去，这里只是做个示例。&lt;/p&gt;

&lt;p&gt;完整代码及编译运行脚本在上面的仓库地址。&lt;/p&gt;

&lt;p&gt;注意 (import (chibi)) 这是需要加载chibi-scheme的lib目录下的scm文件，默认搜索目录是./lib和.目录，所以当运行目录在别的地方时，需要添加module搜索目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sexp_add_module_directory(ctx, tmp=sexp_c_string(ctx,"../lib",-1), SEXP_TRUE);  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;视频链接
 &lt;br /&gt;&lt;a href="https://www.bilibili.com/video/av27986565/"&gt;B站&lt;/a&gt;
 &lt;br /&gt;&lt;a href="https://youtu.be/g4kv1KNKFp0"&gt;Youtube&lt;/a&gt;&lt;/p&gt;</content></entry>
 <entry>
  <title type="text">Realm Of Racket - (big-bang)</title>
  <link rel="alternate" href="https://zhuzhonghua.github.com/2018/01/realm-of-racket-big-bang.html?utm_source=Lisp&amp;utm_medium=Atom" />
  <id>urn:https-zhuzhonghua-github-com:-2018-01-realm-of-racket-big-bang-html</id>
  <published>2018-01-14T06:43:32Z</published>
  <updated>2018-01-14T06:43:32Z</updated>
  <author>
   <name>ZhongHua</name></author>
  <content type="html">
&lt;h1 id="big-bang"&gt;(big-bang)&lt;/h1&gt;

&lt;p&gt;上一次的程序是命令行式的，这次写一些GUI(gooey)的程序
 &lt;br /&gt;这次使用Racket里自带的2htdp/universe 2htdp/image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#lang racket
(require 2htdp/universe 2htdp/image)

(big-bang 0
	(on-tick add-3-to-state)
	(to-draw draw-a-ufo-onto-an-empty-scene))  
	&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;big-bang 创造了一个World, World是由状态和视图组成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (add-3-to-state current-state)
	(+ current-state 3))  
	&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;add&amp;ndash;3-to-state 把当前状态+3，然后返回，big-bang会把add&amp;ndash;3-to-state返回的值标记为下一个状态&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (draw-a-ufo-onto-an-empty-scene current-state)
	(place-image IMAGE-of-UFO (/ WIDTH 2) current-state
		(empty-scene WIDTH HEIGHT)))  
		&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;draw-a-ufo-onto-an-empty-scene 把ufo的图片根据 current-state 绘制到特定位置
 &lt;br /&gt;当图片落地时，动画得停下来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (state-is-300 current-state)
	(&amp;gt;= current-state 300))
	
(big-bang 0
	(on-tick add-3-to-state)
	(to-draw draw-a-ufo-onto-an-empty-scene)
	(stop-when state-is-300))
	&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用state-is&amp;ndash;300和big-bang的stop-when来修改World的状态和视图&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(big-bang state-expression
	(to-draw draw-function)
	(on-tick tick-function)
	(on-key key-function)
	(stop-when stop-function optional-last-scene))
	
	&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;big-bang大致长这样，state-expression是WOrld的初始状态，to-draw是把当前状态绘制到屏幕上，on-tick就是每tick调用的函数，on-key是当有输入操作，如键盘鼠标或者其他输入设备，调用的函数，在key-function里可以对状态进行修改，stop-when就是想让世界停下来的一个函数判断&lt;/p&gt;

&lt;p&gt;该示例的完整源码在 {Racket的安装目录}/share/pkgs/realm/chapter5/ufo-source.rkt里&lt;/p&gt;

&lt;h1 id="写一个gui版本的猜数字游戏"&gt;写一个GUI版本的猜数字游戏&lt;/h1&gt;

&lt;p&gt;好的数据结构会让程序有很大的不同&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct interval (small big))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代表猜数字的上下限&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define HELP-TEXT
	(text " for larger numbers, for smaller ones"
		TEXT-SIZE
		"blue"))
(define HELP-TEXT2
	(text "Press = when your number is guessed; q to quit."
		TEXT-SIZE
		"blue"))
(define COLOR "red")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;游戏指令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define MT-SC
	(place-image/align
		HELP-TEXT TEXT-X TEXT-UPPER-Y "left" "top"
		(place-image/align
			HELP-TEXT2 TEXT-X TEXT-LOWER-Y "left" "bottom"
			(empty-scene WIDTH HEIGHT))))
			&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义常量，作为游戏的背景&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (start lower upper)
	(big-bang (interval lower upper)
		(on-key deal-with-guess)
		(to-draw render)
		(stop-when single? render-last-scene)))
		&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个可以作为Main函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (deal-with-guess w key)
	(cond [(key=? key "up") (bigger w)]
		[(key=? key "down") (smaller w)]
		[(key=? key "q") (stop-with w)]
		[(key=? key "=") (stop-with w)]
		[else w]))  
		&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;deal-with-guess 根据不同的key返回不同的状态&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (smaller w)
	(interval (interval-small w)
		(max (interval-small w) (sub1 (guess w)))))  
		
(define (bigger w)
	(interval (min (interval-big w) (add1 (guess w)))
		(interval-big w)))  
		&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;smaller和bigger都是创建了新的interval结构体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (guess w)
	(quotient (+ (interval-small w) (interval-big w)) 2))  
	&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;guess函数取结构的上下限，加起来然后/2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (render w)
	(overlay (text (number-&amp;gt;string (guess w)) SIZE COLOR) MT-SC))  
	&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;render把猜的数字展示到MT-SC定义的背景上&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (render-last-scene w)
	(overlay (text "End" SIZE COLOR) MT-SC))
	&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当游戏结束调用的函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (single? w)
	(= (interval-small w) (interval-big w)))  
	&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;single?比较上下限，决定是否结束游戏&lt;/p&gt;

&lt;p&gt;猜数字的GUI版本的完整代码在 {Racket的安装目录}/share/pkgs/realm/chapter5/source.rkt&lt;/p&gt;</content></entry>
 <entry>
  <title type="text">Realm Of Racket-猜数字</title>
  <link rel="alternate" href="https://zhuzhonghua.github.com/2017/10/realm-of-racket-%E7%8C%9C%E6%95%B0%E5%AD%97.html?utm_source=Lisp&amp;utm_medium=Atom" />
  <id>urn:https-zhuzhonghua-github-com:-2017-10-realm-of-racket-E7-8C-9C-E6-95-B0-E5-AD-97-html</id>
  <published>2017-10-11T05:45:01Z</published>
  <updated>2017-10-11T05:45:01Z</updated>
  <author>
   <name>ZhongHua</name></author>
  <content type="html">
&lt;p&gt;(A First Racket Program)&lt;/p&gt;

&lt;p&gt;猜数字，最简单，最古老的游戏
 &lt;br /&gt;游戏虽然简单，但是用上了二分查找的方法&lt;/p&gt;

&lt;p&gt;假设数字是18，大概过程是这样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;(guess)  
50  
&amp;gt;(smaller)  
25  
&amp;gt;(smaller))  
12  
&amp;gt;(bigger)  
18  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三个基本功能，(guess),(smaller),(bigger)&lt;/p&gt;

&lt;p&gt;首先定义上下边界
 &lt;br /&gt;用define定义变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;(define lower 1)  
&amp;gt;lower  
1  
&amp;gt;(define upper 100)  
&amp;gt;upper  
100  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用define定义函数, 基本形式是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (function-name argument-name ...)
  function-body-expression
  function-body-expression
...)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;guess的定义如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (guess)
  (quotient (+ lower upper) 2))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;guess函数没有参数，直接写(guess), 接下来就是取lower和upper的中间值&lt;/p&gt;

&lt;p&gt;smaller的定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (smaller)
  (set! upper (max lower (sub1 (guess))))
  (guess))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;set!读作set-bang，基本形式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(set! variable expression)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给variable赋值expression
 &lt;br /&gt;smaller先算出新的upper，然后再赋值给upper，然后再展示新的(guess)值&lt;/p&gt;

&lt;p&gt;bigger的定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (bigger)
  (set! lower (min upper (add1 (guess))))
  (guess))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与smaller类似，计算新的lower，然后展示新的(guess)&lt;/p&gt;

&lt;p&gt;main函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define (start n m)
  (set! lower (min n m))
  (set! upper (max n m))
  (guess))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;跟上面的guess对比，start有参数，(start n m)
 &lt;br /&gt;使用min和max，参数的顺序可以任意&lt;/p&gt;

&lt;p&gt;假设我们猜的数字是19&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;(start 1 30)
15
&amp;gt;(bigger))
23
&amp;gt;(smaller)
19)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总结：
 &lt;br /&gt;1. 使用define定义变量和函数，函数区分有参数和无参数
 &lt;br /&gt;2. 使用set!(set-bang)改变变量的值&lt;/p&gt;</content></entry></feed>